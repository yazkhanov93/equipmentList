# Generated by Django 4.2.1 on 2023-05-15 10:49

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('firstname', models.CharField(max_length=50, verbose_name='Имя')),
                ('middlename', models.CharField(max_length=50, verbose_name='Отчество')),
                ('lastname', models.CharField(max_length=50, verbose_name='Фамилия')),
            ],
            options={
                'verbose_name_plural': 'Профилы',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Отдел')),
            ],
            options={
                'verbose_name_plural': 'Отдел',
            },
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Название')),
                ('price', models.DecimalField(decimal_places=2, max_digits=20, verbose_name='Цена')),
                ('comment', models.TextField(verbose_name='Описание')),
            ],
            options={
                'verbose_name_plural': 'Оборудования',
            },
        ),
        migrations.CreateModel(
            name='Specification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Название')),
            ],
            options={
                'verbose_name_plural': 'Спецификация',
            },
        ),
        migrations.CreateModel(
            name='EquipmentList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fileName', models.CharField(max_length=255, verbose_name='Названия файла')),
                ('fileImage', models.FileField(upload_to='equipment_files/', verbose_name='Файл')),
                ('dateCreate', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('dateModify', models.DateTimeField(auto_now=True, verbose_name='Дата изменения')),
                ('equipmentId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.equipment', verbose_name='Оборудования')),
                ('specificationId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.specification', verbose_name='Спецификация')),
                ('userDownloadId', models.ManyToManyField(blank=True, related_name='user_download_id', to=settings.AUTH_USER_MODEL, verbose_name='Пользователи скачали')),
                ('userModifyId', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь изменил')),
                ('userUploadId', models.ManyToManyField(blank=True, related_name='user_upload_id', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь загрузил')),
            ],
            options={
                'verbose_name_plural': 'Список Оборудование',
            },
        ),
        migrations.AddField(
            model_name='customuser',
            name='department',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='store.department', verbose_name='Отдел'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
